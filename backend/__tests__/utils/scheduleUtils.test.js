// c:\Users\Anas\Desktop\backend\__tests__\utils\scheduleUtils.test.js

const { generateOccurrencesInRange } = require('../../utils/scheduleUtils');
// moment is used internally by the function being tested, but not directly needed for these test definitions
// const moment = require('moment-timezone');

describe('Schedule Utils', () => {
  // ---  mockRule ---
  const mockRule = {
    _id: 'schedule-123',
    ownerId: 'user-123', // Use ownerId as generated by the function
    title: 'Test Schedule',
    start: new Date('2024-01-01T09:00:00Z'), // Jan 1st 9am UTC
    // Extend the rule's end date beyond the test window to allow repetition
    end: new Date('2024-01-05T10:00:00Z'),   // Example: End of series is Jan 5th
    repeat: true,
    repeatType: 'daily',
    exceptionDates: [] // Ensure this property exists, even if empty
  };
  // --- END  ---

  it('should generate daily occurrences', () => {
    const windowStart = new Date('2024-01-01T00:00:00Z'); // Jan 1st midnight UTC
    const windowEnd = new Date('2024-01-03T00:00:00Z');   // Jan 3rd midnight UTC

    const occurrences = generateOccurrencesInRange(mockRule, windowStart, windowEnd);

    // Now it should find Jan 1st @ 9am AND Jan 2nd @ 9am
    expect(occurrences).toHaveLength(2);
    expect(occurrences[0].start.toISOString()).toBe('2024-01-01T09:00:00.000Z');
    expect(occurrences[0].end.toISOString()).toBe('2024-01-01T10:00:00.000Z'); // Check end time too
    expect(occurrences[0].ruleId).toBe('schedule-123');
    expect(occurrences[0].ownerId).toBe('user-123');
    expect(occurrences[0].title).toBe('Test Schedule');

    expect(occurrences[1].start.toISOString()).toBe('2024-01-02T09:00:00.000Z'); // Check the second occurrence start
    expect(occurrences[1].end.toISOString()).toBe('2024-01-02T10:00:00.000Z');   // Check the second occurrence end
    expect(occurrences[1].ruleId).toBe('schedule-123');
    expect(occurrences[1].ownerId).toBe('user-123');
    expect(occurrences[1].title).toBe('Test Schedule');
  });

  it('should handle exception dates', () => {
    const ruleWithException = {
      ...mockRule,
      // Exception for Jan 1st @ 9am UTC (use Date object for comparison)
      exceptionDates: [new Date('2024-01-01T09:00:00Z')]
    };
    const windowStart = new Date('2024-01-01T00:00:00Z');
    const windowEnd = new Date('2024-01-03T00:00:00Z');

    const occurrences = generateOccurrencesInRange(ruleWithException, windowStart, windowEnd);

    // Should skip Jan 1st, but still find Jan 2nd
    expect(occurrences).toHaveLength(1);
    expect(occurrences[0].start.toISOString()).toBe('2024-01-02T09:00:00.000Z'); // Check it's the Jan 2nd occurrence
    expect(occurrences[0].end.toISOString()).toBe('2024-01-02T10:00:00.000Z');
    expect(occurrences[0].ruleId).toBe('schedule-123');
    expect(occurrences[0].ownerId).toBe('user-123');
    expect(occurrences[0].title).toBe('Test Schedule');
  });

  // Optional: Add a test case where the window doesn't include the start date
  it('should generate occurrences starting within the window', () => {
    const windowStart = new Date('2024-01-02T00:00:00Z'); // Start window on Jan 2nd
    const windowEnd = new Date('2024-01-04T00:00:00Z');   // End window on Jan 4th

    const occurrences = generateOccurrencesInRange(mockRule, windowStart, windowEnd);

    // Should find Jan 2nd @ 9am AND Jan 3rd @ 9am
    expect(occurrences).toHaveLength(2);
    expect(occurrences[0].start.toISOString()).toBe('2024-01-02T09:00:00.000Z');
    expect(occurrences[1].start.toISOString()).toBe('2024-01-03T09:00:00.000Z');
  });

  // Optional: Add a test case where the rule ends within the window
   it('should respect the rule end date within the window', () => {
    const ruleEndingEarly = {
        ...mockRule,
        end: new Date('2024-01-02T10:00:00Z'), // Rule repetition series ends after Jan 2nd occurrence
    };
    const windowStart = new Date('2024-01-01T00:00:00Z');
    const windowEnd = new Date('2024-01-04T00:00:00Z');

    const occurrences = generateOccurrencesInRange(ruleEndingEarly, windowStart, windowEnd);

    // Should find Jan 1st @ 9am AND Jan 2nd @ 9am, but NOT Jan 3rd
    expect(occurrences).toHaveLength(2);
    expect(occurrences[0].start.toISOString()).toBe('2024-01-01T09:00:00.000Z');
    expect(occurrences[1].start.toISOString()).toBe('2024-01-02T09:00:00.000Z');
  });

});
