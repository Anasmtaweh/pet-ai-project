# .github/workflows/deploy.yml
name: Backend Test and Deploy

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

env:
  ECR_REGISTRY: 257394484725.dkr.ecr.eu-north-1.amazonaws.com
  ECR_REPOSITORY: pet-ai-backend
  AWS_REGION: eu-north-1
  NODE_VERSION: '20.x'

jobs:
  # --- TEST JOB ---
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # --- REMOVE CACHING OPTIONS ---
          # cache: 'yarn'
          # cache-dependency-path: backend/yarn.lock
          # --- END REMOVE ---

      # Enable Corepack (Still important for subsequent steps)
      - name: Enable Corepack
        run: corepack enable

      - name: Install Dependencies using Corepack
        # Use 'corepack yarn' to ensure the version from package.json is used
        run: corepack yarn install --frozen-lockfile

      - name: Run Tests using Corepack
        # Use 'corepack yarn' to ensure the version from package.json is used
        run: corepack yarn test
        env:
          CI: true
          NODE_ENV: test

  # --- DEPLOY JOB (Remains the same) ---
  build-deploy:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build and push Docker image
        id: build-image
        run: |
          IMAGE_TAG=latest
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: 51.21.213.59
          port: 2222
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: ECR_REGISTRY, ECR_REPOSITORY, AWS_REGION
          script: |
            set -e

            # --- ECR Login and Image Pull ---
            echo "Checking for AWS CLI..."
            if ! command -v aws &> /dev/null; then echo "AWS CLI not found. Installing..."; sudo yum update -y && sudo yum install -y awscli; echo "AWS CLI installed."; fi
            echo "Logging into Amazon ECR via script..."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            echo "ECR login successful via script."

            IMAGE_NAME="$ECR_REGISTRY/$ECR_REPOSITORY:latest"
            CONTAINER_NAME="backend-container"

            echo "Pulling latest image: $IMAGE_NAME"
            docker pull $IMAGE_NAME
            echo "Image pulled successfully."

            echo "Stopping existing container if it exists: $CONTAINER_NAME"
            docker stop $CONTAINER_NAME || echo "Container '$CONTAINER_NAME' not running or failed to stop."

            echo "Removing existing container if it exists: $CONTAINER_NAME"
            docker rm $CONTAINER_NAME || echo "Container '$CONTAINER_NAME' not found or failed to remove."

            # --- Export Secrets ---
            echo "Exporting secrets to shell environment variables..."
            export NODE_ENV="production"
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            export AWS_REGION="${{ env.AWS_REGION }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
            export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
            export DB_URL="${{ secrets.DB_URL }}"
            export EMAIL_USER="${{ secrets.EMAIL_USER }}"
            export EMAIL_PASS="${{ secrets.EMAIL_PASS }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            echo "Secrets exported."

            # --- Run container ---
            echo "Running new container: $CONTAINER_NAME"
            docker run -d \
              --name $CONTAINER_NAME \
              --health-cmd="curl -sSf http://localhost:3001/health || exit 1" \
              --health-interval=30s \
              --health-retries=3 \
              --health-start-period=30s \
              --health-timeout=10s \
              --restart=unless-stopped \
              -p 3001:3001 \
              -e NODE_ENV="$NODE_ENV" \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -e S3_BUCKET_NAME="$S3_BUCKET_NAME" \
              -e OPENAI_API_KEY="$OPENAI_API_KEY" \
              -e DB_URL="$DB_URL" \
              -e EMAIL_USER="$EMAIL_USER" \
              -e EMAIL_PASS="$EMAIL_PASS" \
              -e JWT_SECRET="$JWT_SECRET" \
              $IMAGE_NAME
            echo "âœ… Deployment complete: $CONTAINER_NAME container started."

            # --- Prune images ---
            echo "Pruning dangling Docker images..."
            docker image prune -f
            echo "Image pruning complete."
